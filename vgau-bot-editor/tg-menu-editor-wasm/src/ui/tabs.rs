use eframe::egui;
use crate::graph::SimpleNodeGraph;

pub enum Tab {
    Editor,
    Export,
    Settings,
    Help,
}

pub struct Tabs {
    current_tab: Tab,
}

impl Tabs {
    pub fn new() -> Self {
        Self {
            current_tab: Tab::Editor,
        }
    }

    pub fn draw(
        &mut self,
        ui: &mut egui::Ui,
        node_graph: &mut SimpleNodeGraph,
        status_callback: &mut dyn FnMut(&str, f32),
        export_callback: &mut dyn FnMut(),
        import_callback: &mut dyn FnMut(),
        workflow_metadata: &super::app::WorkflowMetadata,
    ) {
        match self.current_tab {
            Tab::Editor => self.draw_editor_tab(ui, node_graph, status_callback),
            Tab::Export => self.draw_export_tab(ui, export_callback, import_callback, workflow_metadata),
            Tab::Settings => self.draw_settings_tab(ui, status_callback),
            Tab::Help => self.draw_help_tab(ui),
        }
    }

    fn draw_editor_tab(
        &mut self,
        ui: &mut egui::Ui,
        node_graph: &mut SimpleNodeGraph,
        status_callback: &mut dyn FnMut(&str, f32),
    ) {
        // Style for the content area
        ui.spacing_mut().item_spacing = egui::vec2(12.0, 12.0); // Match Tailwind spacing
        
        // Add top toolbar with tailwind-like styling
        egui::Frame::none()
            .fill(egui::Color32::from_rgb(55, 65, 81)) // bg-gray-700
            .rounding(egui::Rounding::same(6.0))
            .show(ui, |ui| {
                ui.horizontal(|ui| {
                    ui.add(egui::Label::new(egui::RichText::new("–ú–∞—Å—à—Ç–∞–±:")
                        .color(egui::Color32::from_rgb(209, 213, 219)))); // gray-300
                    
                    // Button styling
                    let button_style = |ui: &mut egui::Ui| {
                        ui.visuals_mut().widgets.inactive.bg_fill = egui::Color32::from_rgb(75, 85, 99); // gray-600
                        ui.visuals_mut().widgets.active.bg_fill = egui::Color32::from_rgb(59, 130, 246); // blue-500
                        ui.visuals_mut().widgets.hovered.bg_fill = egui::Color32::from_rgb(96, 165, 250); // blue-400
                    };
                    
                    // Apply button style
                    button_style(ui);
                    
                    if ui.button("‚ûñ").clicked() {
                        status_callback("–£–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", 2.0);
                    }
                    
                    if ui.button("üîç").clicked() {
                        status_callback("–°–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", 2.0);
                    }
                    
                    if ui.button("‚ûï").clicked() {
                        status_callback("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", 2.0);
                    }
                    
                    ui.separator();
                    
                    // More buttons with same styling
                    if ui.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å").clicked() {
                        status_callback("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", 2.0);
                    }
                    
                    if ui.button("üìã –í—Å—Ç–∞–≤–∏—Ç—å").clicked() {
                        status_callback("–í—Å—Ç–∞–≤–∫–∞ —É–∑–ª–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", 2.0);
                    }
                    
                    if ui.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å").clicked() {
                        status_callback("–£–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", 2.0);
                    }
                });
            });
        
        ui.add_space(8.0); // Tailwind-like spacing
        
        // Create a frame for the node graph area
        egui::Frame::none()
            .fill(egui::Color32::from_rgb(31, 41, 55)) // bg-gray-800 
            .rounding(egui::Rounding::same(8.0))
            .stroke(egui::Stroke::new(1.0, egui::Color32::from_rgb(55, 65, 81))) // gray-700 border
            .inner_margin(egui::style::Margin::same(12.0))
            .show(ui, |ui| {
                // Draw the node graph
                node_graph.draw(ui);
            });
    }

    fn draw_export_tab(
        &mut self,
        ui: &mut egui::Ui,
        export_callback: &mut dyn FnMut(),
        import_callback: &mut dyn FnMut(),
        workflow_metadata: &super::app::WorkflowMetadata,
    ) {
        // Style ui for Tailwind-like appearance
        ui.spacing_mut().item_spacing = egui::vec2(12.0, 12.0);
        
        ui.vertical(|ui| {
            ui.add(egui::Label::new(egui::RichText::new("–≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
                .size(24.0)
                .color(egui::Color32::from_rgb(209, 213, 219)))); // gray-300
            
            ui.add_space(8.0);
            
            // Workflow metadata editor with tailwind-like styling
            egui::CollapsingHeader::new("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞")
                .default_open(true)
                .show(ui, |ui| {
                    ui.spacing_mut().item_spacing = egui::vec2(8.0, 8.0);
                    
                    let field_label_style = |text: &str| -> egui::RichText {
                        egui::RichText::new(text).color(egui::Color32::from_rgb(209, 213, 219))
                    };
                    
                    ui.horizontal(|ui| {
                        ui.add(egui::Label::new(field_label_style("–ê–≤—Ç–æ—Ä:")));
                        ui.label(&workflow_metadata.author);
                    });
                    
                    ui.horizontal(|ui| {
                        ui.add(egui::Label::new(field_label_style("–û–ø–∏—Å–∞–Ω–∏–µ:")));
                        ui.label(&workflow_metadata.description);
                    });
                    
                    ui.horizontal(|ui| {
                        ui.add(egui::Label::new(field_label_style("–¢–µ–≥–∏:")));
                        ui.label(&workflow_metadata.tags.join(", "));
                    });
                    
                    ui.horizontal(|ui| {
                        ui.add(egui::Label::new(field_label_style("–°–æ–∑–¥–∞–Ω:")));
                        ui.label(&workflow_metadata.created_at);
                    });
                    
                    ui.horizontal(|ui| {
                        ui.add(egui::Label::new(field_label_style("–ò–∑–º–µ–Ω–µ–Ω:")));
                        ui.label(&workflow_metadata.modified_at);
                    });
                });
            
            ui.add_space(10.0);
            ui.label("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
            
            // Add a scrollable text area for the exported JSON
            ui.add(
                egui::TextEdit::multiline(&mut String::new())
                    .desired_width(f32::INFINITY)
                    .desired_rows(15)
                    .font(egui::TextStyle::Monospace.resolve(ui.style()))
            );
            
            ui.add_space(10.0);
            
            // Styled button
            let button = egui::Button::new(
                egui::RichText::new("–û–±–Ω–æ–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç")
                    .color(egui::Color32::WHITE)
            )
            .fill(egui::Color32::from_rgb(59, 130, 246)) // blue-500
            .rounding(egui::Rounding::same(6.0));
            
            if ui.add(button).clicked() {
                export_callback();
            }
            
            ui.separator();
            ui.heading("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö");
            
            // Add a scrollable text area for the imported JSON
            ui.add(
                egui::TextEdit::multiline(&mut String::new())
                    .desired_width(f32::INFINITY)
                    .desired_rows(15)
                    .hint_text("–í—Å—Ç–∞–≤—å—Ç–µ JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...")
                    .font(egui::TextStyle::Monospace.resolve(ui.style()))
            );
            
            ui.horizontal(|ui| {
                if ui.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å").clicked() {
                    import_callback();
                }
                
                if ui.button("–û—á–∏—Å—Ç–∏—Ç—å").clicked() {
                    // TODO: Clear import text
                }
            });
        });
    }

    fn draw_settings_tab(
        &mut self,
        ui: &mut egui::Ui,
        status_callback: &mut dyn FnMut(&str, f32),
    ) {
        ui.heading("–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        
        ui.add_space(10.0);
        
        ui.collapsing("–í–Ω–µ—à–Ω–∏–π –≤–∏–¥", |ui| {
            // Theme settings
            ui.horizontal(|ui| {
                ui.label("–¢–µ–º–∞:");
                ui.selectable_value(&mut String::from("dark"), "dark".to_string(), "–¢–µ–º–Ω–∞—è");
                ui.selectable_value(&mut String::from("light"), "light".to_string(), "–°–≤–µ—Ç–ª–∞—è");
            });
            
            // Font size
            ui.horizontal(|ui| {
                ui.label("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:");
                if ui.button("-").clicked() {
                    status_callback("–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", 2.0);
                }
                ui.label("100%");
                if ui.button("+").clicked() {
                    status_callback("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", 2.0);
                }
            });
        });
        
        ui.collapsing("–ì—Ä–∞—Ñ", |ui| {
            // Grid settings
            ui.checkbox(&mut bool::default(), "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ—Ç–∫—É");
            ui.checkbox(&mut bool::default(), "–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ");
            
            // Connection style
            ui.horizontal(|ui| {
                ui.label("–°—Ç–∏–ª—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:");
                ui.selectable_value(&mut String::from("bezier"), "bezier".to_string(), "–ö—Ä–∏–≤—ã–µ –ë–µ–∑—å–µ");
                ui.selectable_value(&mut String::from("straight"), "straight".to_string(), "–ü—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏");
            });
        });
        
        ui.collapsing("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", |ui| {
            if ui.button("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏").clicked() {
                status_callback("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", 2.0);
            }
            
            if ui.button("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à").clicked() {
                status_callback("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", 2.0);
            }
        });
    }

    fn draw_help_tab(&mut self, ui: &mut egui::Ui) {
        ui.heading("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ");
        
        ui.add_space(10.0);
        
        ui.label("–í–ì–ê–£ –ë–æ—Ç –†–µ–¥–∞–∫—Ç–æ—Ä v1.0");
        ui.label("–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é –∏ FAQ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –í–µ—Ä—Ö–Ω–µ–≤–æ–ª–∂—Å–∫–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≥—Ä–∞—Ä–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞");
        
        ui.add_space(20.0);
        
        ui.heading("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏");
        
        ui.label("‚Ä¢ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∑–ª–æ–≤ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏");
        ui.label("‚Ä¢ Drag-and-drop –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
        ui.label("‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞");
        ui.label("‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ (FAQ) —á–µ—Ä–µ–∑ —É–∑–ª–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã");
        ui.label("‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON");
        ui.label("‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω—é –∏ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º");
        ui.label("‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏");
        ui.label("‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ —É–∑–ª–æ–≤");
        ui.label("‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Ç–º–µ–Ω—ã –∏ –ø–æ–≤—Ç–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π");
        
        ui.add_space(20.0);
        
        ui.heading("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏");
        
        ui.label("‚Ä¢ Ctrl+Z ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        ui.label("‚Ä¢ Ctrl+Y –∏–ª–∏ Ctrl+Shift+Z ‚Äî –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        ui.label("‚Ä¢ Delete ‚Äî –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É–∑–µ–ª");
        ui.label("‚Ä¢ Ctrl+–∫–æ–ª–µ—Å–æ –º—ã—à–∏ ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—à—Ç–∞–±");
        ui.label("‚Ä¢ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Å –∑–∞–∂–∞—Ç—ã–º –õ–ö–ú ‚Äî –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∑–ª–æ–≤");
        ui.label("‚Ä¢ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Å –∑–∞–∂–∞—Ç—ã–º –°–ö–ú/Alt ‚Äî –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏");
        
        ui.add_space(20.0);
        
        if ui.button("–ó–∞–∫—Ä—ã—Ç—å").clicked() {
            self.current_tab = Tab::Editor;
        }
    }

    pub fn set_tab(&mut self, tab: Tab) {
        self.current_tab = tab;
    }

    pub fn get_current_tab(&self) -> &Tab {
        &self.current_tab
    }
} 