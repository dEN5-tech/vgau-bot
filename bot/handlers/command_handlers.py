from aiogram import types
from aiogram.dispatcher import FSMContext

from utils.logger import log_user_interaction
from utils.data_loader import load_bot_data
from keyboards.menu_keyboards import create_main_menu_keyboard, create_faq_keyboard

from modules.states import BotStates
from handlers.search_handlers import process_search

async def register_command_handlers(dp):
    """Register all command handlers"""
    dp.register_message_handler(send_welcome, commands=['start', 'help'])
    dp.register_message_handler(show_menu, commands=['menu'])
    dp.register_message_handler(search_mode, commands=['search'])
    dp.register_message_handler(show_faq, commands=['faq'])
    dp.register_message_handler(handle_unknown_message, state="*")

async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    user_id = message.from_user.id
    log_user_interaction(user_id, "start_command")
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –í–µ—Ä—Ö–Ω–µ–≤–æ–ª–∂—Å–∫–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ "
        "–∞–≥—Ä–æ–±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –æ–±—É—á–µ–Ω–∏—è, —Å—Ä–æ–∫–∞—Ö –ø—Ä–∏–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, "
        "–ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    )
    
    await message.answer(welcome_text, reply_markup=create_main_menu_keyboard())
    await BotStates.main_menu.set()

async def show_menu(message: types.Message):
    """
    Show main menu
    """
    user_id = message.from_user.id
    log_user_interaction(user_id, "menu_command")
    
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu_keyboard())
    await BotStates.main_menu.set()

async def search_mode(message: types.Message):
    """
    Enable search mode
    """
    user_id = message.from_user.id
    log_user_interaction(user_id, "search_command")
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    await BotStates.search.set()

async def show_faq(message: types.Message):
    """
    Show FAQ menu
    """
    user_id = message.from_user.id
    log_user_interaction(user_id, "faq_command")
    
    bot_data = load_bot_data()
    faq_items = bot_data.get("faq", [])
    
    if not faq_items:
        await message.answer("FAQ —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")
        return
    
    await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=create_faq_keyboard(faq_items))

async def handle_unknown_message(message: types.Message, state: FSMContext):
    """
    Handle messages that don't match any other handler
    """
    user_id = message.from_user.id
    text = message.text
    log_user_interaction(user_id, "unknown_message", {"text": text})
    
    # Check if this looks like a search query
    if len(text) > 3:
        # Treat as search query
        await process_search(message, state)
    else:
        await message.answer(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.",
            reply_markup=create_main_menu_keyboard()
        ) 